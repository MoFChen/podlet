[package]
name = "podlet"
version = "0.2.3"
authors = ["Paul Nettleton <k9@k9withabone.dev>"]
edition = "2021"
description = "Generate podman quadlet files from a podman command or a compose file"
readme = "README.md"
repository = "https://github.com/k9withabone/podlet"
license = "MPL-2.0"
keywords = ["podman", "quadlet", "containers"]
categories = ["command-line-utilities"]

[lints.rust]
unused_crate_dependencies = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"

[lints.clippy]
pedantic = "warn"

cargo = { level = "warn", priority = -1 }
multiple_crate_versions = "allow"

# restriction lint group
clone_on_ref_ptr = "warn"
dbg_macro = "warn"
empty_drop = "warn"
empty_structs_with_brackets = "warn"
exit = "warn"
format_push_string = "warn"
if_then_some_else_none = "warn"
indexing_slicing = "warn"
integer_division = "warn"
mixed_read_write_in_expression = "warn"
mod_module_files = "warn"
multiple_inherent_impl = "warn"
needless_raw_strings = "warn"
panic = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_type_annotations = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
semicolon_outside_block = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
unimplemented = "warn"
unnecessary_self_imports = "warn"
unreachable = "warn"
unwrap_used = "warn"
verbose_file_reads = "warn"

[dependencies]
clap = { version = "4.2", features = ["derive", "wrap_help"] }
color-eyre = "0.6"
docker-compose-types = "0.7.0"
duration-str = { version = "0.7", default-features = false }
indexmap = "2"
ipnet = { version = "2.7", features = ["serde"] }
k8s-openapi = { version = "0.21", features = ["latest"] }
path-clean = "1"
serde = { version = "1", features = ["derive"] }
serde_yaml = "0.9.21"
shlex = "1.3"
smart-default = "0.7"
thiserror = "1.0.40"
umask = "2.1.0"
url = "2.3"

[target.'cfg(unix)'.dependencies]
nix = { version = "0.26", features = ["user"], default-features = false }
zbus = "3.12"

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.8.1"
# CI backends to support
ci = ["github"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu", "x86_64-unknown-linux-musl", "x86_64-pc-windows-msvc"]
# The installers to generate for each app
installers = []
# Publish jobs to run in CI
pr-run-mode = "plan"

# Config for 'git cliff'
# Run with `git cliff --bump -c Cargo.toml -up CHANGELOG.md`
# https://git-cliff.org/docs/configuration
[workspace.metadata.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif -%}
          {% if commit.breaking %}[**breaking**] {% endif -%}
          {{ commit.message | upper_first }}\
          {% for footer in commit.footers | filter(attribute="token", value="Fixes") -%}
              {% raw %} {% endraw %}({{ footer.value }})\
          {% endfor -%}
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
  { pattern = '<REPO>', replace = "https://github.com/k9withabone/podlet" },
  { pattern = '### \pN+ ', replace = "### " } # remove numbers from groups
]

[workspace.metadata.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = []
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "1 Features" },
  { body = ".*security", group = "2 Security" },
  { message = "^fix", group = "3 Bug Fixes" },
  { message = "^perf", group = "4 Performance" },
  { message = "^doc", group = "5 Documentation" },
  { message = "^test", group = "6 Testing" },
  { message = "^refactor", group = "7 Refactor" },
  { message = "^style", group = "8 Styling" },
  { message = "^chore", group = "9 Miscellaneous Tasks" },
  { message = "^ci", default_scope = "ci", group = "9 Miscellaneous Tasks" },
  { message = "^revert", group = "10 Revert" },
  { message = "^release", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
